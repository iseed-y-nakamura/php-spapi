<?php
/**
 * ShipmentMeasurements
 *
 * PHP version 5
 *
 * @category Class
 * @package  Popsicle\Amazon
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Selling Partner API for Retail Procurement Shipments
 *
 * The Selling Partner API for Retail Procurement Shipments provides programmatic access to retail shipping data for vendors.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.25
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Popsicle\Amazon\Model\VendorShipments;

use \ArrayAccess;
use \Popsicle\Amazon\ObjectSerializer;

/**
 * ShipmentMeasurements Class Doc Comment
 *
 * @category Class
 * @description Shipment measurement details.
 * @package  Popsicle\Amazon
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ShipmentMeasurements implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ShipmentMeasurements';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'gross_shipment_weight' => '\Popsicle\Amazon\Model\VendorShipments\Weight',
'shipment_volume' => '\Popsicle\Amazon\Model\VendorShipments\Volume',
'carton_count' => 'int',
'pallet_count' => 'int'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'gross_shipment_weight' => null,
'shipment_volume' => null,
'carton_count' => null,
'pallet_count' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'gross_shipment_weight' => 'grossShipmentWeight',
'shipment_volume' => 'shipmentVolume',
'carton_count' => 'cartonCount',
'pallet_count' => 'palletCount'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'gross_shipment_weight' => 'setGrossShipmentWeight',
'shipment_volume' => 'setShipmentVolume',
'carton_count' => 'setCartonCount',
'pallet_count' => 'setPalletCount'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'gross_shipment_weight' => 'getGrossShipmentWeight',
'shipment_volume' => 'getShipmentVolume',
'carton_count' => 'getCartonCount',
'pallet_count' => 'getPalletCount'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['gross_shipment_weight'] = isset($data['gross_shipment_weight']) ? $data['gross_shipment_weight'] : null;
        $this->container['shipment_volume'] = isset($data['shipment_volume']) ? $data['shipment_volume'] : null;
        $this->container['carton_count'] = isset($data['carton_count']) ? $data['carton_count'] : null;
        $this->container['pallet_count'] = isset($data['pallet_count']) ? $data['pallet_count'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets gross_shipment_weight
     *
     * @return \Popsicle\Amazon\Model\VendorShipments\Weight
     */
    public function getGrossShipmentWeight()
    {
        return $this->container['gross_shipment_weight'];
    }

    /**
     * Sets gross_shipment_weight
     *
     * @param \Popsicle\Amazon\Model\VendorShipments\Weight $gross_shipment_weight gross_shipment_weight
     *
     * @return $this
     */
    public function setGrossShipmentWeight($gross_shipment_weight)
    {
        $this->container['gross_shipment_weight'] = $gross_shipment_weight;

        return $this;
    }

    /**
     * Gets shipment_volume
     *
     * @return \Popsicle\Amazon\Model\VendorShipments\Volume
     */
    public function getShipmentVolume()
    {
        return $this->container['shipment_volume'];
    }

    /**
     * Sets shipment_volume
     *
     * @param \Popsicle\Amazon\Model\VendorShipments\Volume $shipment_volume shipment_volume
     *
     * @return $this
     */
    public function setShipmentVolume($shipment_volume)
    {
        $this->container['shipment_volume'] = $shipment_volume;

        return $this;
    }

    /**
     * Gets carton_count
     *
     * @return int
     */
    public function getCartonCount()
    {
        return $this->container['carton_count'];
    }

    /**
     * Sets carton_count
     *
     * @param int $carton_count Number of cartons present in the shipment. Provide the cartonCount only for unpalletized shipments.
     *
     * @return $this
     */
    public function setCartonCount($carton_count)
    {
        $this->container['carton_count'] = $carton_count;

        return $this;
    }

    /**
     * Gets pallet_count
     *
     * @return int
     */
    public function getPalletCount()
    {
        return $this->container['pallet_count'];
    }

    /**
     * Sets pallet_count
     *
     * @param int $pallet_count Number of pallets present in the shipment. Provide the palletCount only for palletized shipments.
     *
     * @return $this
     */
    public function setPalletCount($pallet_count)
    {
        $this->container['pallet_count'] = $pallet_count;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
